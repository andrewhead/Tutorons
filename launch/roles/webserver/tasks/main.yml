---
- name: Install server software
  apt: name={{ item }} update_cache=yes
  with_items:
  - git
  - python-pip
  - nginx
  - python-boto
  - python-dev
  - supervisor
  - memcached
  tags: serverpkgs

- name: Install application dependencies
  apt: name={{ item }} update_cache=yes
  with_items: systempkgs
  when: systempkgs is defined
  tags: systempkgs

- name: Install Docker
  shell: curl -sSL https://get.docker.com/ | sh
  tags: dockerinstall

- name: Install Docker Python library
  pip: name=docker-py version=1.1.0
  tags: dockerinstall

- name: Create the ubuntu group
  group: name=ubuntu
  tags: user

- name: Create the ubuntu user
  user: name=ubuntu group=ubuntu
  tags: user

- name: Create project directory
  file: state=directory path={{ projectdir }} owner=ubuntu

- name: Create static directory
  file: state=directory path={{ scriptdir }} owner=ubuntu

- name: Create static files directory
  file: state=directory path={{ staticdir }} owner=ubuntu

- name: Create folder for uploadable libraries and content
  file: state=directory path=/var/www/{{ appname }} owner=ubuntu

- name: Create log file
  file: state=touch path={{ logfile }} owner=ubuntu
  when: logfile is defined

- name: Install virtualenv
  pip: name=virtualenv

- name: Transfer Python dependencies list
  copy: src={{ appname }}-reqs.txt dest={{ projectdir }}
  tags: pythonpkgs
  become_user: ubuntu

- name: Install server Python dependencies
  pip: requirements={{ projectdir }}/{{ appname }}-reqs.txt virtualenv="{{ venv }}"
  tags: pythonpkgs
  become_user: ubuntu

- name: Checkout source code
  git: repo={{ repo }} dest={{ src }} force=yes recursive=yes
  tags: updatecode
  become_user: ubuntu

- name: Make Java project dependencies directory
  file: state=directory path={{ src }}/deps owner=ubuntu
  become_user: ubuntu

- name: Remove previous versions of project dependencies
  file: state=absent path={{ src }}/deps/{{ item }}
  with_items: external_deps
  when: external_deps is defined
  tags: dependencies
  become_user: ubuntu

- name: Install dependencies for project
  s3: bucket={{ publicbucket }} object={{ publicdir }}/{{ item }} dest={{ src }}/deps/{{ item }} 
      mode=get overwrite=false aws_access_key={{ aws_access_key_id }} aws_secret_key={{ aws_secret_access_key }}
  with_items: external_deps
  when: external_deps is defined
  tags: dependencies
  become_user: ubuntu

- name: Install gunicorn
  pip: name=gunicorn virtualenv="{{ venv }}"
  become_user: ubuntu

- name: Configure nginx main site
  template: src=nginx-site.j2 dest=/etc/nginx/sites-enabled/{{ appname }}

- name: Add subdomains for localsites
  template: src=local-server.j2 dest=/etc/nginx/sites-enabled/{{ item.subdomain }}
  with_items: subdomains
  when: subdomains is defined
  tags: subdomains

- name: Remove default nginx user
  lineinfile: dest=/etc/nginx/nginx.conf line="user www-data;" state=absent

- name: Add nginx user
  lineinfile: dest=/etc/nginx/nginx.conf line="user ubuntu ubuntu;"

- name: Create directory for Django secret keys
  file: state=directory path=/etc/django

- name: Fetch Django app secret key
  s3: bucket={{ privatebucket }} object={{ djkey }} dest=/etc/django/{{ djkey }} mode=get
      aws_access_key={{ aws_access_key_id }} aws_secret_key={{ aws_secret_access_key }}
  tags: appkey

- name: Sync DB with Django models
  django_manage: >
    command={{ item }}
    app_path={{ djdir }}
    virtualenv={{ venv }}
    settings={{ djsettings }}
  with_items:
  - syncdb
  - migrate
  tags: updatecode
  become_user: ubuntu

- name: Update static files
  django_manage: >
    command=collectstatic
    app_path={{ djdir }}
    virtualenv={{ venv }}
    settings={{ djsettings }}
  when: staticfiles is defined
  tags: updatecode
  become_user: ubuntu

- name: Transfer setup scripts
  template: src={{ item }}.j2 dest={{ scriptdir }}/{{ item }}.sh
  with_items: scripts
  when: scripts is defined
  tags: scripts
  become_user: ubuntu

- name: Run setup scripts
  command: /bin/bash {{ item }}.sh chdir={{ scriptdir }}
  with_items: scripts
  when: scripts is defined
  tags: scripts
  become_user: ubuntu

- name: Make sure memcached is running
  service: name=memcached state=started
  tags: memcached

- name: Create Docker group
  group: name=docker state=present
  tags: containers
  become_user: ubuntu

- name: Fetch and start Docker containers
  docker:
    image: "{{ item.image }}"
    state: running
    ports: "{{ item.host_port }}:{{ item.exposed_port }}"
  with_items: containers
  when: containers is defined
  tags: containers

- name: Add auxiliary processes to supervisor
  template: src={{ item }}.j2 dest=/etc/supervisor/conf.d/{{ item }}.conf
  with_items: processes
  when: processes is defined
  tags: processes

- name: Load auxiliary processes
  supervisorctl: name={{ item }} state=present
  with_items: processes
  when: processes is defined
  tags: processes

- name: Restart auxiliary processes (stop)
  supervisorctl: name={{ item }} state=stopped
  with_items: processes
  when: processes is defined
  tags: processes

- name: Restart auxiliary processes (start)
  supervisorctl: name={{ item }} state=started
  with_items: processes
  when: processes is defined
  tags: processes

- name: Copy app to supervisor
  template: src=supervisor.j2 dest=/etc/supervisor/conf.d/{{ appname }}.conf

- name: Stop application
  supervisorctl: name={{ appname }} state={{ item }}
  with_items:
  - present
  - stopped
  tags: updatecode

- name: Cleanup after last application run
  file: dest=/tmp/{{ appname }}.pid state=absent
  tags: updatecode

- name: Start application
  supervisorctl: name={{ appname }} state=started
  tags: updatecode

- name: Restart nginx
  service: name=nginx state=restarted
  tags: subdomains
